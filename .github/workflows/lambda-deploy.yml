name: Deploy Lambda Functions

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Create deployment packages
        run: |
          # Debug: Show current directory
          echo "Current directory contents:"
          ls -la

          # Create packages for both functions
          for func in extract standardize; do
            echo "Creating package for $func function..."
            
            # Create fresh package directory
            rm -rf package
            mkdir -p package

            # Install dependencies
            pip install --no-cache-dir --platform manylinux2014_x86_64 \
              --target ./package --implementation cp --python-version 3.9 \
              --only-binary=:all: --upgrade -r requirements.txt

            # Clean up unnecessary files
            rm -rf package/*.dist-info package/*.pth

            # Copy source file
            cp src/$func.py package/

            # Create zip file
            cd package && zip -r ../${func}_function.zip . -x "*.pyc" "*.pyo" "test*" "tests*" "*__pycache__*"
            cd ..

            # Debug: Show zip size
            ls -lh ${func}_function.zip
          done

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init

      - name: Terraform Plan
        id: terraform_plan
        run: |
          cd infrastructure
          terraform plan -out=tfplan \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}"
        continue-on-error: true

      - name: Check Terraform Plan Exit Code
        run: |
          if [ -s infrastructure/tfplan ]; then
            echo "Terraform plan succeeded with changes."
            echo "apply_plan=true" >> $GITHUB_ENV
          else
            echo "No changes detected or plan failed."
            echo "apply_plan=false" >> $GITHUB_ENV
          fi

      - name: Terraform Apply
        if: env.apply_plan == 'true'
        run: |
          cd infrastructure
          terraform apply -auto-approve tfplan
