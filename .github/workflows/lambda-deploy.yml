name: Deploy Lambda Functions

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.5.7"

      - name: Create Tesseract Layer
        run: |
          cd lambda
          rm -rf lambda-layer
          mkdir -p lambda-layer/python

          # Install Tesseract and its dependencies
          docker run --rm -v $(pwd)/lambda-layer:/layer amazonlinux:2 \
            bash -c "
              set -ex
              yum install -y amazon-linux-extras
              amazon-linux-extras install epel -y
              yum install -y python3 python3-pip
              yum clean all
              yum makecache
              yum install -y tesseract libstdc++ libgomp libtiff libpng libjpeg leptonica

              # Remove leftover yum cache, docs, man pages, etc.
              rm -rf /var/cache/yum
              rm -rf /usr/share/doc
              rm -rf /usr/share/man
              find /usr/lib -name '*.a' -delete

              # Strip unneeded symbols from .so libraries
              find /usr/lib* /usr/lib64* -type f -name '*.so*' -exec strip --strip-unneeded {} \; 2>/dev/null || true

              # Possibly remove any fonts or configs you don't need
              rm -rf /usr/share/fonts/*

              # Create the tessdata directory in the layer
              mkdir -p /layer/lib/tessdata

              # Download English language data
              curl -L https://github.com/tesseract-ocr/tessdata/raw/master/eng.traineddata -o /usr/share/tesseract/tessdata/eng.traineddata

              # Remove everything except eng.traineddata in /usr/share/tesseract/tessdata
              find /usr/share/tesseract/tessdata -type f -name '*.traineddata' ! -name 'eng.traineddata' -exec rm {} \;

              # Copy eng.traineddata to the layer
              cp /usr/share/tesseract/tessdata/eng.traineddata /layer/lib/tessdata/
            "

          cd lambda-layer
          zip -r ../tesseract-layer.zip .
          cd ..

      - name: Create OpenCV Layer
        run: |
          cd lambda
          rm -rf opencv-layer
          mkdir -p opencv-layer/python

          # Install OpenCV and its dependencies
          docker run --rm -v $(pwd)/opencv-layer:/layer amazonlinux:2 \
            bash -c "
              set -ex
              yum install -y python3 python3-pip
              mkdir -p /layer/python/lib/python3.9/site-packages
              pip3 install --target=/layer/python/lib/python3.9/site-packages opencv-python-headless Pillow pytesseract

              # Strip unneeded symbols from .so files
              find /layer/python/lib/python3.9/site-packages -type f -name '*.so*' -exec strip --strip-unneeded {} \; 2>/dev/null || true
            "

          cd opencv-layer
          zip -r ../opencv-layer.zip .
          cd ..

      - name: Create Pillow and Pytesseract Layer
        run: |
          cd lambda
          rm -rf pytesseract-layer
          mkdir -p pytesseract-layer/python

          # Install Pillow and pytesseract
          docker run --rm -v $(pwd)/pytesseract-layer:/layer amazonlinux:2 \
            bash -c "
              set -ex
              yum install -y python3 python3-pip
              mkdir -p /layer/python/lib/python3.9/site-packages
              pip3 install --target=/layer/python/lib/python3.9/site-packages Pillow pytesseract
            "

          cd pytesseract-layer
          zip -r ../pytesseract-layer.zip .
          cd ..

      - name: Create deployment packages
        run: |
          cd lambda
          for func in extract standardize; do
            echo "Creating package for $func function..."
            
            # Create fresh package directory
            rm -rf package
            mkdir -p package

            # Install dependencies for the function
            pip install --target ./package \
                --platform manylinux2014_x86_64 \
                --implementation cp \
                --python-version 3.9 \
                --only-binary=:all: \
                openai

            # Copy source file
            cp src/$func.py package/$func.py

            # Create zip file with correct name
            cd package
            zip -r ../function.zip .
            cd ..

            echo "Created zip file for $func"
            ls -lh *.zip
          done

      - name: Terraform Init
        run: |
          cd lambda/infrastructure
          terraform init -upgrade
          terraform workspace select prod || terraform workspace new prod

      - name: Terraform Plan
        id: terraform_plan
        run: |
          cd lambda/infrastructure
          terraform plan -out=tfplan \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}"

      - name: Check Terraform Plan Exit Code
        run: |
          cd lambda/infrastructure
          if [ -s tfplan ]; then
            echo "Terraform plan succeeded with changes."
            echo "apply_plan=true" >> $GITHUB_ENV
          else
            echo "No changes detected or plan failed."
            echo "apply_plan=false" >> $GITHUB_ENV
          fi

      - name: Terraform Apply
        if: env.apply_plan == 'true'
        run: |
          cd lambda/infrastructure
          terraform apply -auto-approve tfplan
