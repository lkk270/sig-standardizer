name: Deploy Lambda Functions
 
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.5.7"

      - name: Create deployment packages
        run: |
          cd lambda
          for func in extract standardize; do
            echo "Creating package for $func function..."
            
            # Create fresh package directory
            rm -rf package
            mkdir -p package

            # Install dependencies with platform-specific binaries
            if [ "$func" = "extract" ]; then
              pip install --target ./package \
                  --platform manylinux2014_x86_64 \
                  --implementation cp \
                  --python-version 3.9 \
                  --only-binary=:all: \
                  pillow pytesseract
            else
              pip install --target ./package \
                  openai
            fi

            # Copy source file
            cp src/$func.py package/$func.py

            # Create zip file with correct name
            cd package
            if [ "$func" = "extract" ]; then
              zip -r ../function.zip .
            else
              zip -r ../${func}_function.zip .
            fi
            cd ..

            echo "Created zip file for $func"
            ls -lh *.zip
          done

      - name: Create Tesseract layer
        run: |
          cd lambda
          rm -rf lambda-layer
          mkdir -p lambda-layer/opt/lib
          mkdir -p lambda-layer/opt/lib/tessdata
          
          docker run --rm -v $(pwd)/lambda-layer:/layer amazonlinux:2 \
            bash -c "
              set -ex
              
              # Install EPEL and update
              amazon-linux-extras install epel -y
              yum clean all
              yum makecache
              yum update -y
              
              # Install development tools and core utilities
              yum install -y which findutils
              yum groupinstall -y 'Development Tools'
              yum install -y tesseract tesseract-devel tesseract-langpack-eng leptonica-devel
              yum install -y libstdc++ libgomp libtiff libpng libjpeg
              
              # Find and copy tesseract executable
              TESSERACT_PATH=/usr/bin/tesseract
              echo \"Found tesseract at: \$TESSERACT_PATH\"
              cp -v \$TESSERACT_PATH /layer/opt/lib/tesseract
              chmod 755 /layer/opt/lib/tesseract
              
              # Find and copy tessdata
              find /usr -name tessdata -type d -exec cp -rv {}/* /layer/opt/lib/tessdata/ \\;
              
              # Copy all required libraries
              ldd \$TESSERACT_PATH | grep '=> /' | awk '{print \$3}' | xargs -I '{}' cp -v '{}' /layer/opt/lib/
              
              chmod -R 755 /layer/opt/lib
              
              echo 'Layer contents:'
              find /layer -type f -ls
              
              echo 'Testing Tesseract:'
              LD_LIBRARY_PATH=/layer/opt/lib TESSDATA_PREFIX=/layer/opt/lib/tessdata /layer/opt/lib/tesseract --version
            "
          
          cd lambda-layer
          zip -r ../tesseract-layer.zip .

      - name: Terraform Init
        run: |
          cd lambda/infrastructure
          terraform init -upgrade

      - name: Select Terraform Workspace
        run: |
          cd lambda/infrastructure
          terraform workspace select prod || terraform workspace new prod

      - name: Terraform Plan
        id: terraform_plan
        run: |
          cd lambda/infrastructure
          terraform plan -out=tfplan \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}"
        continue-on-error: true

      - name: Check Terraform Plan Exit Code
        run: |
          if [ -s lambda/infrastructure/tfplan ]; then
            echo "Terraform plan succeeded with changes."
            echo "apply_plan=true" >> $GITHUB_ENV
          else
            echo "No changes detected or plan failed."
            echo "apply_plan=false" >> $GITHUB_ENV
          fi

      - name: Terraform Apply
        if: env.apply_plan == 'true'
        run: |
          cd lambda/infrastructure
          terraform apply -auto-approve tfplan
